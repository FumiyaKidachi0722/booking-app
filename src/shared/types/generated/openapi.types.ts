/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/reservations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 予約一覧（検索・ページング） */
        get: operations["listReservations"];
        put?: never;
        /** 予約を作成（見積→スロット確保→pending作成） */
        post: operations["createReservation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/reservations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 予約の取得 */
        get: operations["getReservation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/reservations/{id}/extend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 予約延長（追加スロット確保） */
        post: operations["extendReservation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/reservations/{id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 予約キャンセル（キャンセル料算定→返金→スロット解放） */
        post: operations["cancelReservation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/availability": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 可用スロット検索（15分グリッド） */
        get: operations["searchAvailability"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/config/preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 公開中Configの解決結果をプレビュー */
        get: operations["previewConfig"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payments/webhook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 決済プロバイダ Webhook（署名検証必須） */
        post: operations["paymentsWebhook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @enum {string} */
        ReservationStatus: "pending_payment" | "confirmed" | "cancelled" | "no_show" | "completed";
        Reservation: {
            id: string;
            tenantId: string;
            locationId: string;
            serviceId: string;
            primaryResourceId: string;
            customerId: string;
            status: components["schemas"]["ReservationStatus"];
            /** Format: date-time */
            startAtUTC: string;
            /** Format: date-time */
            endAtUTC: string;
            people: number;
            extraSnapshot?: {
                [key: string]: unknown;
            };
        };
        CreateReservationRequest: {
            tenantId: string;
            locationId: string;
            resourceId: string;
            serviceId: string;
            customerId: string;
            /**
             * Format: date-time
             * @description ISO8601（UTC）
             */
            startAtUTC: string;
            durationMin: number;
            people: number;
            seatType?: string;
            hasNomination?: boolean;
            /** @enum {string} */
            nominationType?: "none" | "in" | "regular";
        };
        CreateReservationResponse: {
            reservationId: string;
            /** @description 最終金額（税サ込） */
            amount: number;
            cancelFeePreview: number;
        };
        ExtendReservationRequest: {
            /** @description 追加する分数（例：30） */
            additionalMin: number;
            /**
             * @description 料金再計算を行うか（適用ルールが時間帯で変わる場合に推奨）
             * @default true
             */
            recalcPricing: boolean;
        };
        ExtendReservationResponse: {
            reservationId: string;
            /** Format: date-time */
            newEndAtUTC: string;
            /** @description 延長により増分請求される金額（税サ込） */
            additionalAmount: number;
        };
        CancelReservationRequest: {
            reason?: string;
            /**
             * @description 管理者によるキャンセル料免除（要権限）
             * @default false
             */
            waiveFee: boolean;
        };
        CancelReservationResponse: {
            reservationId: string;
            /** Format: date-time */
            canceledAtUTC: string;
            /** @description 算定されたキャンセル料 */
            cancelFee: number;
            /** @description 返金額（負の数で請求追加） */
            refundedAmount: number;
        };
        ReservationListResponse: {
            items: components["schemas"]["Reservation"][];
            nextPageToken?: string | null;
        };
        AvailabilityResponse: {
            /** @example 15 */
            unitMin: number;
            /** @description 指定日の 00:00〜23:45 のスロット一覧（UTCベース） */
            slots: {
                /**
                 * @description HHmm（UTC）
                 * @example 1900
                 */
                hhmm: string;
                available: boolean;
            }[];
        };
        ResolvedPricingConfig: {
            /** @enum {string} */
            cat: "pricing";
            versionTag: string;
            cfg: components["schemas"]["PricingConfig"];
        };
        ResolvedCancellationPolicy: {
            /** @enum {string} */
            cat: "cancellation";
            versionTag: string;
            cfg: components["schemas"]["CancellationPolicy"];
        };
        PricingConfig: {
            /** @example JPY */
            currency: string;
            /** @enum {string} */
            rounding: "floor" | "ceil" | "round";
            serviceRate: number;
            taxRate: number;
            rules: components["schemas"]["PricingRule"][];
        };
        PricingRule: {
            id: string;
            name: string;
            when: components["schemas"]["RuleCond"];
            calc: (components["schemas"]["CalcFixed"] | components["schemas"]["CalcPerTime"] | components["schemas"]["CalcPerPerson"] | components["schemas"]["CalcPercent"])[];
            /**
             * @default subtotal
             * @enum {string}
             */
            applyTo: "subtotal" | "service" | "tax";
            /** @default 100 */
            priority: number;
            /** @default false */
            breakOnMatch: boolean;
        };
        RuleCond: {
            dow?: number[];
            time?: components["schemas"]["TimeWindow"];
            seatTypeIn?: string[];
            hasNomination?: boolean;
            /** @enum {string} */
            nominationType?: "none" | "in" | "regular";
            peopleGte?: number;
            peopleLte?: number;
            courseIdIn?: string[];
        };
        TimeWindow: {
            startMin: number;
            endMin: number;
        };
        CalcFixed: {
            /** @enum {string} */
            kind: "fixed";
            value: number;
        };
        CalcPerTime: {
            /** @enum {string} */
            kind: "per_time";
            unitMin: number;
            unitPrice: number;
        };
        CalcPerPerson: {
            /** @enum {string} */
            kind: "per_person";
            unitPrice: number;
        };
        CalcPercent: {
            /** @enum {string} */
            kind: "percent";
            rate: number;
        };
        CancellationPolicy: {
            tiersAsc: {
                thresholdMin: number;
                fee: {
                    /** @enum {string} */
                    kind: "percent";
                    rate: number;
                } | {
                    /** @enum {string} */
                    kind: "fixed";
                    amount: number;
                };
            }[];
            noShow: {
                /** @enum {string} */
                kind: "percent";
                rate: number;
            };
            /** @enum {string} */
            boundaryRule: "gte" | "gt";
        };
        ErrorResponse: {
            code: string;
            message: string;
        };
    };
    responses: {
        /** @description 入力不正 */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description 競合（二重予約/スロット占有/決済状態） */
        Conflict: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description 見つからない */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description サーバエラー */
        ServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
    };
    parameters: {
        reservationId: string;
        /** @description 冪等性キー（同一キーの再試行は同結果を返す） */
        IdempotencyKey: string;
        pageSize: number;
        pageToken: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listReservations: {
        parameters: {
            query: {
                pageSize?: components["parameters"]["pageSize"];
                pageToken?: components["parameters"]["pageToken"];
                tenantId: string;
                locationId?: string;
                status?: components["schemas"]["ReservationStatus"];
                /** @description 期間フィルタ（開始：ISO、UTC） */
                fromUTC?: string;
                /** @description 期間フィルタ（終了：ISO、UTC） */
                toUTC?: string;
                customerId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 一覧 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReservationListResponse"];
                };
            };
        };
    };
    createReservation: {
        parameters: {
            query?: never;
            header: {
                /** @description 冪等性キー（同一キーの再試行は同結果を返す） */
                "Idempotency-Key": components["parameters"]["IdempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateReservationRequest"];
            };
        };
        responses: {
            /** @description 作成成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateReservationResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            409: components["responses"]["Conflict"];
            500: components["responses"]["ServerError"];
        };
    };
    getReservation: {
        parameters: {
            query: {
                tenantId: string;
            };
            header?: never;
            path: {
                id: components["parameters"]["reservationId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 予約 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Reservation"];
                };
            };
            404: components["responses"]["NotFound"];
            500: components["responses"]["ServerError"];
        };
    };
    extendReservation: {
        parameters: {
            query: {
                tenantId: string;
            };
            header: {
                /** @description 冪等性キー（同一キーの再試行は同結果を返す） */
                "Idempotency-Key": components["parameters"]["IdempotencyKey"];
            };
            path: {
                id: components["parameters"]["reservationId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExtendReservationRequest"];
            };
        };
        responses: {
            /** @description 延長成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExtendReservationResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            404: components["responses"]["NotFound"];
            409: components["responses"]["Conflict"];
            500: components["responses"]["ServerError"];
        };
    };
    cancelReservation: {
        parameters: {
            query: {
                tenantId: string;
            };
            header: {
                /** @description 冪等性キー（同一キーの再試行は同結果を返す） */
                "Idempotency-Key": components["parameters"]["IdempotencyKey"];
            };
            path: {
                id: components["parameters"]["reservationId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CancelReservationRequest"];
            };
        };
        responses: {
            /** @description キャンセル成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelReservationResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            404: components["responses"]["NotFound"];
            /** @description 決済状態などによりキャンセル不能 */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            500: components["responses"]["ServerError"];
        };
    };
    searchAvailability: {
        parameters: {
            query: {
                tenantId: string;
                resourceId: string;
                /** @description 対象日（UTC）YYYY-MM-DD */
                dateUTC: string;
                unitMin?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description スロット一覧 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AvailabilityResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            500: components["responses"]["ServerError"];
        };
    };
    previewConfig: {
        parameters: {
            query: {
                category: "pricing" | "cancellation";
                tenantId: string;
                locationId?: string;
                productId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 解決されたConfig */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResolvedPricingConfig"] | components["schemas"]["ResolvedCancellationPolicy"];
                };
            };
            400: components["responses"]["BadRequest"];
            500: components["responses"]["ServerError"];
        };
    };
    paymentsWebhook: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description 受領 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadRequest"];
            500: components["responses"]["ServerError"];
        };
    };
}
